// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Travel preferences
  languages String[] @default([])
  interests String[] @default([])
  
  // Relations
  conversations Conversation[]
  favorites     Favorite[]
  trips         Trip[]

  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  location  String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // "user" | "assistant" | "system"
  content        String
  metadata       Json?    // For storing additional data like audio URLs, cultural insights, etc.
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CulturalInsight {
  id          String   @id @default(cuid())
  location    String
  latitude    Float?
  longitude   Float?
  category    String   // "customs", "laws", "events", "phrases", "recommendations"
  title       String
  description String
  content     Json     // Structured content based on category
  language    String   @default("en")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Vector embedding for semantic search
  embedding Float[]

  @@map("cultural_insights")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "location", "insight", "phrase"
  referenceId String // ID of the favorited item
  metadata  Json     // Additional data about the favorite
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, referenceId])
  @@map("favorites")
}

model Trip {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  locations   Json      // Array of locations with coordinates
  status      String    @default("planned") // "planned", "active", "completed"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trips")
}

model AudioCache {
  id        String   @id @default(cuid())
  text      String
  language  String
  audioUrl  String
  createdAt DateTime @default(now())

  @@unique([text, language])
  @@map("audio_cache")
}