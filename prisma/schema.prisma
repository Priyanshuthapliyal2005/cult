// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Travel preferences
  languages String[] @default([])
  interests String[] @default([])
  
  // Relations
  conversations Conversation[]
  favorites     Favorite[]
  trips         Trip[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  location  String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // "user" | "assistant" | "system"
  content        String
  metadata       Json?    // For storing additional data like audio URLs, cultural insights, etc.
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CulturalInsight {
  id          String   @id @default(cuid())
  location    String
  latitude    Float?
  longitude   Float?
  category    String   // "customs", "laws", "events", "phrases", "recommendations"
  title       String
  description String
  content     Json     // Structured content based on category
  language    String   @default("en")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Vector embedding for semantic search (1536 dimensions for Google embeddings)
  embedding Unsupported("vector(1536)")?

  @@map("cultural_insights")
  @@index([embedding], map: "cultural_insights_embedding_idx", type: Ivfflat)
}

model VectorContent {
  id        String   @id @default(cuid())
  contentId String   // Reference to original content
  contentType String // "destination", "phrase", "custom", "recommendation", etc.
  title     String
  content   String   @db.Text
  metadata  Json     // Store additional context like location, category, etc.
  embedding Unsupported("vector(1536)")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vector_content")
  @@index([embedding], map: "vector_content_embedding_idx", type: Ivfflat)
  @@index([contentType])
  @@index([contentId])
}

model ConversationContext {
  id             String   @id @default(cuid())
  conversationId String
  retrievedContent Json   // Store retrieved context for debugging
  embedding      Unsupported("vector(1536)")
  relevanceScore Float?
  createdAt      DateTime @default(now())

  @@map("conversation_context")
  @@index([conversationId])
  @@index([embedding], map: "conversation_context_embedding_idx", type: Ivfflat)
}
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "location", "insight", "phrase"
  referenceId String // ID of the favorited item
  metadata  Json     // Additional data about the favorite
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, referenceId])
  @@map("favorites")
}

model Trip {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  locations   Json      // Array of locations with coordinates
  status      String    @default("planned") // "planned", "active", "completed"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trips")
}

model AudioCache {
  id        String   @id @default(cuid())
  text      String
  language  String
  audioUrl  String
  createdAt DateTime @default(now())

  @@unique([text, language])
  @@map("audio_cache")
}