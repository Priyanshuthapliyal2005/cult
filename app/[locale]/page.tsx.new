'use client';

import { useState, useEffect, useRef } from 'react';
import { motion, useScroll, useTransform, useSpring, useInView, stagger } from 'framer-motion';
import { MapPin, MessageCircle, Globe, Compass, Users, Zap, Scale, Database, ArrowRight, ChevronDown, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge'; 
import { useTranslations, useLocale } from 'next-intl';
import { useRouter } from 'next/navigation';
import UserMenu from '@/components/UserMenu';
import LanguageSwitcher from '@/components/LanguageSwitcher';
import { cityDatabase, type CityData } from '@/lib/cityDatabase';
import Link from 'next/link';

export default function Home() {
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoaded, setIsLoaded] = useState(false);
  const [scrollY, setScrollY] = useState(0);
  const heroRef = useRef<HTMLDivElement>(null);
  const featuredRef = useRef<HTMLDivElement>(null);
  const featuresRef = useRef<HTMLDivElement>(null);
  const testimonialRef = useRef<HTMLDivElement>(null);
  const ctaRef = useRef<HTMLDivElement>(null);
  
  const { scrollYProgress } = useScroll();
  const scale = useTransform(scrollYProgress, [0, 1], [1, 1.1]);
  const y = useTransform(scrollYProgress, [0, 1], [0, -100]);
  const heroOpacity = useTransform(scrollYProgress, [0, 0.2], [1, 0.5]);
  const smoothY = useSpring(y, { stiffness: 100, damping: 30 });
  
  const isHeroInView = useInView(heroRef, { once: false, amount: 0.5 });
  const isFeaturedInView = useInView(featuredRef, { once: false, amount: 0.2 });
  const isFeaturesInView = useInView(featuresRef, { once: false, amount: 0.2 });
  const isTestimonialInView = useInView(testimonialRef, { once: false, amount: 0.2 });
  const isCtaInView = useInView(ctaRef, { once: false, amount: 0.2 });
  
  const tFeatures = useTranslations('features');
  const tNavigation = useTranslations('navigation');
  const tHomepage = useTranslations('homepage');
  const tCommon = useTranslations('common');
  const locale = useLocale();
  const router = useRouter();

  useEffect(() => {
    setIsLoaded(true);
    
    const handleScroll = () => {
      setScrollY(window.scrollY);
    };
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const features = [
    {
      icon: Globe,
      title: tFeatures('culturalIntelligence.title'),
      description: tFeatures('culturalIntelligence.description'),
      color: 'from-blue-500 to-cyan-500',
    },
    {
      icon: MessageCircle,
      title: tFeatures('aiAssistant.title'),
      description: tFeatures('aiAssistant.description'),
      color: 'from-purple-500 to-pink-500',
    },
    {
      icon: MapPin,
      title: tFeatures('interactiveMapping.title'),
      description: tFeatures('interactiveMapping.description'),
      color: 'from-green-500 to-emerald-500',
    },
    {
      icon: Compass,
      title: tFeatures('localNavigation.title'),
      description: tFeatures('localNavigation.description'),
      color: 'from-orange-500 to-red-500',
    },
    {
      icon: Users,
      title: tFeatures('communityInsights.title'),
      description: tFeatures('communityInsights.description'),
      color: 'from-indigo-500 to-purple-500',
    },
    {
      icon: Zap,
      title: tFeatures('realTimeUpdates.title'),
      description: tFeatures('realTimeUpdates.description'),
      color: 'from-yellow-500 to-orange-500',
    },
  ];

  // Get featured destinations from city database
  const featuredDestinations = [
    'pushkar-india',
    'rishikesh-india', 
    'mussoorie-india',
    'tokyo-japan'
  ].map(id => cityDatabase.find(city => city.id === id)).filter(Boolean) as CityData[];

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      const path = locale === 'en' ? '/explore' : `/${locale}/explore`;
      router.push(`${path}?q=${encodeURIComponent(searchQuery)}`);
    }
  };

  const staggerChildrenVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: i * 0.1,
        duration: 0.8,
        ease: [0.215, 0.61, 0.355, 1]
      }
    })
  };
  
  const heroTextVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        staggerChildren: 0.2,
        delayChildren: 0.3
      }
    }
  };
  
  const parallaxOffset = {
    transform: `translateY(${-scrollY * 0.15}px)`
  };

  const getLocalizedPath = (path: string) => {
    return locale === 'en' ? path : `/${locale}${path}`;
  };

  return (
    <div className="min-h-screen clay-hero-pattern">
      {/* Header */}
      <header className="px-4 lg:px-6 h-16 flex items-center justify-between clay-frosted-nav fixed w-full z-50">
        <div className="flex items-center space-x-2">
          <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg clay-float">
            <Globe className="w-6 h-6 text-white" />
          </div>
          <span className="text-xl font-bold clay-gradient-text">
            CulturalCompass
          </span>
        </div>
        <nav className="flex items-center space-x-6">
          <Link href={getLocalizedPath('/explore')} className="text-gray-600 hover:text-gray-900 transition-colors">
            {tNavigation('explore')}
          </Link>
          <Link href={getLocalizedPath('/explore?tab=laws')} className="text-gray-600 hover:text-gray-900 transition-colors">
            {tNavigation('laws')}
          </Link>
          <Link href={getLocalizedPath('/knowledge-base')} className="text-gray-600 hover:text-gray-900 transition-colors">
            Knowledge Base
          </Link>
          <Link href={getLocalizedPath('/chat')} className="text-gray-600 hover:text-gray-900 transition-colors">
            {tNavigation('chat')}
          </Link>
          <Link href={getLocalizedPath('/admin')} className="text-gray-600 hover:text-gray-900 transition-colors">
            {tNavigation('admin')}
          </Link>
          <LanguageSwitcher variant="compact" />
          <UserMenu />
        </nav>
      </header>

      {/* Rest of your JSX */}
      <div className="pt-16">
        {/* Add your content here */}
      </div>
    </div>
  );
}

const Star = ({ className }: { className?: string }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    width="24" 
    height="24" 
    viewBox="0 0 24 24" 
    fill="currentColor" 
    stroke="currentColor" 
    strokeWidth="1" 
    strokeLinecap="round" 
    strokeLinejoin="round" 
    className={className}
  >
    <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
  </svg>
);
